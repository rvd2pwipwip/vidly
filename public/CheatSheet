1.in terminal, run create-react-app vidly
2.cd in vidly to install bootstrap and font-awesome:
npm i bootstrap@4.1.1 font-awesome@4.7.0
3.import css files for bootstrap and font-awesome in index.js:
import "bootstrap/dist/css/bootstrap.css";
import "font-awesome/css/font-awesome.css";
4.in the project folder, start the project:
npm start
5.replace the default react app with basic bootstrap template.
go to getbootstrap.com > examples > framework > starter template
look for <main role="main" class="container"> in page source
6.in App.js, delete everything in the return of the render() and replace with:
<main className="container">
  <h1>Hello World</h1>
</main>
7.get the Starter Code.zip and copy the Services folder in the project src folder
8.create components folder in src folder and create App.jsx component (will replace App.js)
9.create Movies component and test render with console log:
import React, { Component } from "react";
import { getMovies } from "../services/fakeMovieService";

class Movies extends Component {
  state = { movies: getMovies() };
  render() {
    return <h2>Movies Component</h2>;
  }
}

export default Movies;
10.import Movies in App.js and insert a <Movie/> component in the .main div:
import React, { Component } from "react";
import Movies from "./Movies";

class App extends Component {
  render() {
    return (
      <main className="container">
        <Movies />
      </main>
    );
  }
}

export default App;
11.create table in render method by typing table.table>thead>tr>th*4 to output (emmet):
render() {
    return (
      <table className="table">
        <thead>
          <tr>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
          </tr>
        </thead>
      </table>
    );
  }
}
12.enter the 4 <th/> names:
<th>Title</th>
<th>Genre</th>
<th>Stock</th>
<th>Rate</th>
13.inside the <table/>, below the <thead>, create the body by typing tbody>tr>td*4
14.render the <td/> tags dynamically by applying a map function on the state.movies:
<tbody>
  {this.state.movies.map(m => (
    <tr key={m._id}>
      <td>{m.title}</td>
      <td>{m.genre.name}</td>
      <td>{m.numberInStock}</td>
      <td>{m.dailyRentalRate}</td>
    </tr>
  ))}
</tbody>
15.add a fifth <th/> with no text to the <thead/> and a fifth <td/> to the <tbody/> to add a delete button:
<td>
  <button className="btn btn-danger btn-sm"> //bootstrap styles for small red button
    Delete
  </button>
</td>
16.handle click event in <button/>:
<button
  className="btn btn-danger btn-sm"
  onClick={this.handleDelete}
>
  Delete
</button>
17.create new handleDelete => function just above render() in <Movies/>:
handleDelete = () => {
  console.log("deleting");
};
18.add the movie to be deleted as a parameter of handleDelete() and change the onClick call
of the <button/> to an => function so it can pass the movie id to handleDelete():
handleDelete = movie => {
  console.table(movie);
};

<button
  className="btn btn-danger btn-sm"
  onClick={() => {
    this.handleDelete(m);
  }}
>
  Delete
</button>
19.update the state by applying a filter to the current movies:
handleDelete = movie => {
  const movies = this.state.movies.filter(m => m._id !== movie._id);
  this.setState({ movies });
};
20.create a common folder inside the components folder
21.create a Like.jsx file inside the common folder
22.copy font awesome markup for empty heart icon and paste it into render() of <Like/>
don't forget to chege class to className -fontawesome was npm installed in the packages
(https://fontawesome.com/v4.7.0/icon/heart-o):
import React, { Component } from "react";

// input: liked boolean
// output: onClick

class Like extends Component {
  state = {};
  render() {
    return <i className="fa fa-heart-o" aria-hidden="true" />;
  }
}

export default Like;
22.in Movies.jsx, add a new column <th/> with a <Like/> inside before the delete <th>:
<table className="table">
  <thead>
    <tr>
      <th>Title</th>
      <th>Genre</th>
      <th>Stock</th>
      <th>Rate</th>
      <th />
      <th />
    </tr>
  </thead>
  <tbody>
    {this.state.movies.map(m => (
      <tr key={m._id}>
        <td>{m.title}</td>
        <td>{m.genre.name}</td>
        <td>{m.numberInStock}</td>
        <td>{m.dailyRentalRate}</td>
        <td>
          <Like />
        </td>
        <td>
          <button
            className="btn btn-danger btn-sm"
            onClick={() => {
              this.handleDelete(m);
            }}
          >
            Delete
          </button>
        </td>
      </tr>
    ))}
  </tbody>
</table>
23.create a liked prop inside the <Like/> component of the table and set it to true:
<Like liked={true} />
24.modify the <Like/> render() to change the className if liked props 
is true (className="fa fa-heart") or false (className="fa fa-heart-o"):
class Like extends Component {
  state = {};
  render() {
    let classes = "fa fa-heart";
    return (
      <i
        className={this.props.liked ? classes : `${classes}-o`}
        aria-hidden="true"
      />
    );
  }
}
25.in Movies.jsx, change the hard coded liked props to be dynamically set to each movie liked value:
<Like liked={m.liked} />
26.in fakeMovieService, add a liked property to the first movie and set it to true then save to confirm
27.set the onClick prop of <i/> in Like.jsx to props.handleLiked and add inline style for hand pointer:
return (
  <i
    className={this.props.liked ? classes : `${classes}-o`}
    aria-hidden="true"
    onClick={this.props.handleLiked}
    style={{ cursor: "pointer" }}
  />
);
28.in Movies.jsx, create the handleLiked prop inside the <Like/> component, set it to this.handleLiked()
and create the function handleLiked() to display a console.log('Liked'):
handleLiked = () => {
  console.log("Liked");
}
...
<Like liked={m.liked} handleLiked={this.handleLiked} />
29.change the handleLiked prop to an => function to pass the clicke movie to this.handleLiked:
<Like liked={m.liked} handleLiked={() => this.handleLiked(m)} />
30.change the handleLiked() to log which movie was clicked:
handleLiked = movie => {
  console.log("Liked", movie);
};
31.change the handleLiked() to copy the state, find the liked movie, toggle its liked property and updtae the state:
handleLiked = movie => {
  // 1. copy state
  const movies = [...this.state.movies];
  // 2. find movie index and update its liked property
  const index = movies.indexOf(movie);
  movies[index].liked = !movies[index].liked;
  // 3. update state
  this.setState({ movies });
};
32.Like.jsx can be changed to an sfc:
import React from "react";

const Like = props => {
  let classes = "fa fa-heart";
  return (
    <i
      className={props.liked ? classes : `${classes}-o`}
      aria-hidden="true"
      onClick={props.handleLiked}
      style={{ cursor: "pointer" }}
    />
  );
};

export default Like;
33.create a new Pagination.jsx file inside common, then imr and sfc, 
name the component Pagination and pass the props as an argument:
import React from "react";

const Pagination = props => {
  return ();
};

export default Pagination;
34.go to bootstrap documentation and find the markup for a pagination component
(https://getbootstrap.com/docs/4.1/components/pagination/) to paste it in the return():
import React from "react";

const Pagination = props => {
  return (
    <nav aria-label="Page navigation example">
      <ul className="pagination">
        <li className="page-item">
          <a className="page-link" href="#">
            1
          </a>
        </li>
      </ul>
    </nav>
  );
};

export default Pagination;
35.in Movies.jsx, import then add the new <Pagination/> component below the table:
import Pagination from "./common/Pagination";
...
<Pagination/>
36.add pagination props to the component (# of items and page size):
<Pagination itemsCount={this.state.movies.length} pageSize={this.state.pageSize} />
37.initialize pageSize property in the state:
state = { movies: getMovies(), pageSize: 4 };
38.add handlePageChange prop to Pagination:
<Pagination
  itemsCount={this.state.movies.length}
  pageSize={this.state.pageSize}
  handlePageChange={this.handlePageChange}
/>
39.create the handlePageChange function of Movies to confirm with a log:
handlePageChange = page => {
  console.log(page);
};
40.in Pagination.jsx, create the itemsCount and PageSize const to determine the page count:
const { itemsCount, pageSize } = props;
const pagesCount = Math.ceil(itemsCount / pageSize);
41.console cd in vidly and npm install lodash to use it to generate an array of the number of pages:
npm i lodash@4.17.10
42.import lodash in Pagination.jsx:
import _ from "lodash";
43.use lodash to create a pages array with keys [1, 2, 3]:
const pages = _.range(1, pagesCount + 1);
44.map the pages array to create a <li/> for each page:
<ul className="pagination">
  {pages.map(p => (
    <li key={p} className="page-item">
      <a className="page-link" href="#">
        {p}
      </a>
    </li>
  ))}
</ul>
