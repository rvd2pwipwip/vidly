1.in terminal, run create-react-app vidly
2.cd in vidly to install bootstrap and font-awesome:
npm i bootstrap@4.1.1 font-awesome@4.7.0
3.import css files for bootstrap and font-awesome in index.js:
import "bootstrap/dist/css/bootstrap.css";
import "font-awesome/css/font-awesome.css";
4.in the project folder, start the project:
npm start
5.replace the default react app with basic bootstrap template.
go to getbootstrap.com > examples > framework > starter template
look for <main role="main" class="container"> in page source
6.in App.js, delete everything in the return of the render() and replace with:
<main className="container">
  <h1>Hello World</h1>
</main>
7.get the Starter Code.zip and copy the Services folder in the project src folder
8.create components folder in src folder and create App.jsx component (will replace App.js)
9.create Movies component and test render with console log:
import React, { Component } from "react";
import { getMovies } from "../services/fakeMovieService";

class Movies extends Component {
  state = { movies: getMovies() };
  render() {
    return <h2>Movies Component</h2>;
  }
}

export default Movies;
10.import Movies in App.js and insert a <Movie/> component in the .main div:
import React, { Component } from "react";
import Movies from "./Movies";

class App extends Component {
  render() {
    return (
      <main className="container">
        <Movies />
      </main>
    );
  }
}

export default App;
11.create table in render method by typing table.table>thead>tr>th*4 to output (emmet):
render() {
    return (
      <table className="table">
        <thead>
          <tr>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
          </tr>
        </thead>
      </table>
    );
  }
}
12.enter the 4 <th/> names:
<th>Title</th>
<th>Genre</th>
<th>Stock</th>
<th>Rate</th>
13.inside the <table/>, below the <thead>, create the body by typing tbody>tr>td*4
14.render the <td/> tags dynamically by applying a map function on the state.movies:
<tbody>
  {this.state.movies.map(m => (
    <tr key={m._id}>
      <td>{m.title}</td>
      <td>{m.genre.name}</td>
      <td>{m.numberInStock}</td>
      <td>{m.dailyRentalRate}</td>
    </tr>
  ))}
</tbody>
15.add a fifth <th/> with no text to the <thead/> and a fifth <td/> to the <tbody/> to add a delete button:
<td>
  <button className="btn btn-danger btn-sm"> //bootstrap styles for small red button
    Delete
  </button>
</td>
16.handle click event in <button/>:
<button
  className="btn btn-danger btn-sm"
  onClick={this.handleDelete}
>
  Delete
</button>
17.create new handleDelete => function just above render() in <Movies/>:
handleDelete = () => {
  console.log("deleting");
};
18.add the movie to be deleted as a parameter of handleDelete() and change the onClick call
of the <button/> to an => function so it can pass the movie id to handleDelete():
handleDelete = movie => {
  console.table(movie);
};

<button
  className="btn btn-danger btn-sm"
  onClick={() => {
    this.handleDelete(m);
  }}
>
  Delete
</button>
19.update the state by applying a filter to the current movies:
handleDelete = movie => {
  const movies = this.state.movies.filter(m => m._id !== movie._id);
  this.setState({ movies });
};